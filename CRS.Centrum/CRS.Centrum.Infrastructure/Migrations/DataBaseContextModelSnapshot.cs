// <auto-generated />
using System;
using CRS.Offer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CRS.Centrum.Infrastructure.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CRS.Offer.Core.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.MasterService", b =>
                {
                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("MasterId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("MasterServices");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("WhatDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("OfficeId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.Master", b =>
                {
                    b.HasOne("CRS.Offer.Core.Entities.Office", "Office")
                        .WithMany("Masters")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.MasterService", b =>
                {
                    b.HasOne("CRS.Offer.Core.Entities.Master", "Master")
                        .WithMany("MasterService")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRS.Offer.Core.Entities.Service", "Service")
                        .WithMany("MasterService")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.Schedule", b =>
                {
                    b.HasOne("CRS.Offer.Core.Entities.Master", "Master")
                        .WithMany("Schedules")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRS.Offer.Core.Entities.Office", "Office")
                        .WithMany("Schedules")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.Service", b =>
                {
                    b.HasOne("CRS.Offer.Core.Entities.Office", "Office")
                        .WithMany("Services")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.Master", b =>
                {
                    b.Navigation("MasterService");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.Office", b =>
                {
                    b.Navigation("Masters");

                    b.Navigation("Schedules");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("CRS.Offer.Core.Entities.Service", b =>
                {
                    b.Navigation("MasterService");
                });
#pragma warning restore 612, 618
        }
    }
}
